<template>
  <view class="player">
    <!-- 内嵌播放器 -->
    <view class="player-container" wx:if="{{!normal}}">
      <!-- <image src="{{poster}}" class="poster"></image> -->
      <view class="play-info">
        <block wx:if="{{isWaiting}}">
          <view class="button-container">
            <image src="../common/images/loading.svg" class="play-icon"></image>
          </view>
        </block>
        <block wx:else>
          <view class="button-container" @tap="togglePlay">
            <image src="../common/images/{{!playState ? 'play' : 'pause'}}.svg" class="play-icon"></image>
          </view>
        </block>
        <!-- <text class="audio-text">{{name}}</text> -->
      </view>
      <view class="handle-info">
        <text class="audio-text">{{name}}</text>
        <view class="player-bar">
          <slider bindchanging="sliderChanging" bindchange="sliderChange" block-size="10" selected-color="#d19e69" block-color="#d19e69" min="0" max="{{max}}" value="{{radio}}" class="slider"/>
        </view>
        <view class="time">
          <text class="audio-time">{{formatCurrentTime}}</text>
          <text class="audio-time">{{formatDuration}}</text>
        </view>
      </view>
    </view>
    <!-- 课程播放器 -->
    <view class="player-container-normal" wx:if="{{normal}}">
      <view class="list-container" hidden="{{!showList}}" @tap.stop="clickCloseList" style="height: {{getListHeight}}px;" @touchmove.stop="true">
        <view class="list-card">
          <view class="list-top"  @tap.stop="clickCloseList">
            <image src="../common/images/close2.png" class="list-close" />
          </view>
          <scroll-view class="list-middle" scroll-y style="height: 280rpx;" scroll-into-view="{{toView}}">
            <view wx:for="{{songList}}" wx:key="index" wx:for-index="index" id="song-{{index}}" wx:for-item="item" class="list-item" @tap="selectLesson({{item}}, {{index}})">
              <image src="../common/images/music.svg" class="music-icon" hidden="{{index != currentSongIndex}}" />
              <!-- <view class="music-icon" hidden="{{index != currentSongIndex}}">
                <view class="m1"></view>
                <view class="m2"></view>
                <view class="m3"></view>
              </view> -->
              <text class="item-title {{index == currentSongIndex ? 'item-active' : ''}}">{{item.title}}</text>
            </view>
          </scroll-view>
          <view class="list-bottom" @tap.stop="entryHome">
            <image src="../common/images/READS.png" class="list-reading" mode="widthFix" />
            <text>查看更多书籍</text>
          </view>
        </view>
      </view>
      <!-- <view class="list-container" wx:if="{{showList}}" @tap.stop="clickCloseList">
        <view class="list-card">
          <view class="list-top"  @tap.stop="clickCloseList">
            <image src="../common/images/close2.png" class="list-close" />
          </view>
          <view class="list-middle">
            <view wx:for="{{songList}}" wx:key="index" wx:for-index="index" wx:for-item="item" class="list-item" @tap="selectLesson({{item}}, {{index}})">
              <view class="music-icon" hidden="{{index != currentSongIndex}}">
                <view class="m1"></view>
                <view class="m2"></view>
                <view class="m3"></view>
              </view>
              <text class="item-title {{index == currentSongIndex ? 'item-active' : ''}}">{{item.title}}</text>
            </view>
          </view>
          <view class="list-bottom" @tap.stop="entryHome">
            <image src="../common/images/READS.png" class="list-reading" mode="widthFix" />
            <text>查看更多书籍</text>
          </view>
        </view>
      </view> -->
      <view class="play-info-content">
        <view class="play-info">
          <image src="{{songList[songIndex]['cover']}}" class="poster animate-{{playState ? 'active' : 'stop'}}"/>
          <block wx:if="{{isWaiting}}">
            <view class="button-container">
              <image src="../common/images/loading-white.svg" class="play-icon"></image>
            </view>
          </block>
          <block wx:else>
            <view class="button-container" @tap.stop="togglePlay">
              <image src="../common/images/{{!playState ? 'play_white' : 'pause_white'}}.svg" class="play-icon"></image>
            </view>
          </block>
        </view>
        <view class="nomal-content">
          <slider bindchanging="sliderChanging" bindchange="sliderChange" block-size="10" activeColor="#4a494c" backgroundColor="#d9d7d8" block-color="#d49d62" min="0" max="{{max}}" value="{{radio}}" class="slider"/>
          <view class="list-wrapper" @tap.stop="clickList" wx:if="{{songList.length > 0}}">
            <image src="../common/images/dir.png" class="list-icon" />
          </view>
        </view>
      </view>
    </view>
  </view>
</template>

<script>
  import wepy from 'wepy';
  import {checkArr} from '@/common/js/func';

  export default class PlayerInner extends wepy.component {
    props = {
      poster: {
        type: String,
        default: ''
      },
      name: {
        type: String,
        default: ''
      },
      author: {
        type: String,
        default: ''
      },
      src: {
        type: String,
        default: ''
      },
      startTime: {
        type: Number,
        default: 0,
      },
      normal: {
        type: Boolean,
        default: true,
      },
      autoNext: {
        type: Boolean,
        default: false,
      },
      songList: {
        type: Array,
        default: [],
      },
      cutHeight: {
        type: Number,
        default: 100,
      },
      songIndex: {
        type: Number,
        default: 0,
        twoWay: true,
      },
      newInstance: {
        type: Boolean,
        default: true,
      },
      showList: {
        type: Boolean,
        default: false,
        twoWay: true,
      },
    };
    data = {
      duration: 0,
      formatDuration: '',
      max: 0,
      playState: false,
      isWaiting: false,
      firstWaiting: true,
      firstPlay: true,
      currentTime: 0,
      formatCurrentTime: '00:00',
      radio: 0,
      audioEnd: false,
      sliderEnable: false,
      sliderChanging: false,
      currentSongIndex: -1,
      windowWidth: 0,
      windowHeight: 0,
      toView: '',
      timer: 0,
    };

    onLoad() {
      this.windowWidth = wx.getSystemInfoSync().windowWidth;
      this.windowHeight = wx.getSystemInfoSync().windowHeight;
    };
    computed = {
      getListHeight() {
        const radio = 750 / this.windowWidth;
        return this.windowHeight - this.cutHeight / radio  - 100 / radio;
      }
    };
    methods = {
      togglePlay() {
        if (this.firstPlay) {
          if (!this.normal && (!this.name || !this.poster || !this.src)) return;
          if (this.normal && (!this.name || !this.src)) return;
          this._createAudio();
        } else {
          this.playState = !this.playState;
          if (this.playState) {
            if (this.backgroundAudioManager) this.backgroundAudioManager.play();
          } else {
            if (this.backgroundAudioManager) this.backgroundAudioManager.pause();
          }
        }
      },
      sliderChange(e) {
        if (!this.backgroundAudioManager) return;
        this.sliderChanging = false;
        const value = e.detail.value;
        this.backgroundAudioManager.seek(value);
        this.playState = true;
        this.backgroundAudioManager.play();
      },
      sliderChanging(e) {
        this.sliderChanging = true;
      },
      clickList() {
        if (this.showList) this.showList = false;
        else {
          this.showList = true;
          this.toView = `song-${+this.currentSongIndex - 1}`;
        };
      },
      clickCloseList() {
        this.showList = false;
      },
      entryHome() {
        wx.navigateTo({
          url: 'index',
        });
      },
      selectLesson(lesson, index) {
        this.$emit('lessonChage', index, lesson);
      },
    };

    watch = {
      playState(newState) {

      },
      item(newItem) {
        
      },
      songList(list) {
        const key = 'songList';
        const saveList = wx.getStorageSync(key);
        if (checkArr(saveList, list)) {
          const key = 'currentSongIndex';
          this.currentSongIndex = wx.getStorageSync(key);
        }
      },
      // songIndex(index) {
      //   this.currentSongIndex = index;
      //   console.log(index)
      // },
      src(newSrc, oldSrc) {
        const realSrc = newSrc.split('?')[0];
        const player = wx.getBackgroundAudioManager();
        const currentSrc = player && player.src ? player.src.split('?')[0] : '';
        if (currentSrc === realSrc) {
          this.newInstance = false;
        } else {
          this.newInstance = true;
        }
        if (!this.newInstance && player.src && this.normal) {
          const pausedState = player.paused;
          this.firstPlay = false;
          this.playState = pausedState === false || pausedState === 0 ? true : false;
          this.formatCurrentTime = this.format(player.currentTime);
          this.radio = Math.floor(this.currentTime);
          this._createAudio(true);

          return;
        }
        
        this.duration = 0;
        this.formatDuration = '';
        this.max = 0;
        this.playState = false;
        this.isWaiting = false;
        this.firstWaiting = true;
        this.firstPlay = true;
        this.currentTime = 0;
        this.formatCurrentTime = '00:00';
        this.radio = 0;
        this.audioEnd = false;
        this.sliderEnable = false;
        if (this.autoNext) {
          this._createAudio();
        }
      },
      audioEnd(newValue) {
        if (newValue) {
          this.$emit('audioEnd');
        }
      },
      autoNext(newValue) {
        if (newValue && this.src) {
          this._createAudio();
        }
      },
    };
    format(interval){
      interval = interval | 0;
      const minute = this._pad(interval / 60 | 0);
      const second = this._pad(interval % 60);

      return `${minute}:${second}`;
    };

    _pad(num, n = 2) {
      let len = num.toString().length;
      while (len < n) {
        num = '0' + num;
        len++;
      }

      return num;
    };

    _savePlayInfo({title, coverImgUrl, src, songList, songIndex}) {
      const key = 'playerInfo';
      const data = {
        src: src,
        name: title,
        poster: coverImgUrl,
        songList,
        songIndex,
      }
      wx.setStorage({key, data});

      return;
    };
    _saveStartTime(time) {
      const key = 'playerStartTime';
      wx.setStorage({key, data: time});
    };
    _saveCurrentIndex(index) {
      const key = "currentSongIndex";
      wx.setStorage({key, data: index});
    };
    _saveSongList(list) {
      const key = "songList";
      wx.setStorage({key, data: list});
    };

    
    _createAudio(newInstance) {
      let backgroundAudioManager = null;
      backgroundAudioManager = wx.getBackgroundAudioManager();
      const course = this.songList[this.songIndex];
      this.name = course && course.title ? course.title : this.name;
      if (!newInstance) {
        backgroundAudioManager.title = this.name;
        backgroundAudioManager.coverImgUrl = this.poster;
        backgroundAudioManager.src = this.src; // 设置了 src 之后会自动播放
        backgroundAudioManager.startTime = this.startTime;
      }
      this.backgroundAudioManager = backgroundAudioManager;
      this.sliderEnable = true;
      if (this.firstPlay) {
        this.isWaiting = true;
      }
      if (this.normal) {
        this.timer = setTimeout(() => {
          this._savePlayInfo({
            title: this.name,
            coverImgUrl: this.poster,
            src: this.src,
            songList: this.songList,
            songIndex: this.songIndex,
          });
          this._saveCurrentIndex(this.songIndex);
          this._saveSongList(this.songList);
        }, 200)
      }
      this.currentSongIndex = this.songIndex;
      backgroundAudioManager.onWaiting(() => {
        this.isWaiting = true;
        this.$apply();
      });
      backgroundAudioManager.onCanplay(() =>{
        this.duration = backgroundAudioManager.duration;
        this.formatDuration = this.format(this.duration);
        this.$apply();
      });
      backgroundAudioManager.onPlay(() => {
        if (this.firstPlay) {
          this.firstPlay = false;
        }
        this.playState = true;
        this.$apply();
      });
      backgroundAudioManager.onPause(() => {
        this.playState = false;
        this.$apply();
      });
      backgroundAudioManager.onTimeUpdate(() => {
        if (this.sliderChanging) return;
        this.isWaiting = false;
        if (this.sliderEnable) {
          this.currentTime = backgroundAudioManager.currentTime;
          if (this.normal) {
            this._saveStartTime(this.currentTime);
          }
          this.formatCurrentTime = this.format(this.currentTime);
          this.radio = Math.floor(this.currentTime);
          this.duration = backgroundAudioManager.duration;
          this.max = Math.floor(this.duration);
          this.formatDuration = this.format(this.duration);
        } else {
          this.radio = 0;
          this.currentTime = '00:00';
          this.duration = 0;
          this.max = 0;
          this.formatDuration = '';
        }

        this.$apply();
      });
      backgroundAudioManager.onPrev(() => {
        this.$emit('prev');
      });
      backgroundAudioManager.onNext(() => {
        this.$emit('next');
      });
      backgroundAudioManager.onEnded(() => {
        this.audioEnd = true;
        this.$apply();
      });
    }
  }
</script>

<style type="scss" lang="scss">
  $player-height: 165rpx;
  $player-height-normal: 100rpx;
  $color: #d19e69;
  $bar-color: #e9e9e9;
  $border-info: 1px solid $color;
  $size: 25rpx;
  .music-icon{
    width: 30rpx;
    height: 30rpx;
    position: relative;
  }
  @keyframes wave{
    0%{height: $size / 6}
    50%{height: $size - 7rpx}
    100%{height: $size / 2}
  }
  .player {
    // background-color: $bg-color;
    display: flex !important;
    justify-content: center;
    align-items: center;
    overflow: hidden;
    .slider {
      width: 80%;
      margin: 5rpx 0 5rpx 10rpx;
    }
  }
  .player-container {
    width: 720rpx;
    height: 190rpx;
    height: $player-height;
    display: flex;
    justify-content: flex-start;
    align-items: center;
    background-color: #F8F8F8;
    border-radius: 10px;
    border: 1px solid rgba(155, 155, 155, 0.2);
    overflow: hidden;
    .play-info {
      display: flex;
      justify-content: flex-start;
      align-items: center;
      margin: 0 30rpx;
      color: $color;
      font-size: 35rpx;
      .audio-text {
        max-width: 356rpx;
      }
      .button-container {
        width: $player-height * 0.5;
        height: $player-height * 0.5;
        border: $border-info;
        border-radius: 50%;
        display: flex;
        justify-content: center;
        align-items: center;
        .play-icon {
          display: block;
          width: $player-height * 0.4;
          height: $player-height * 0.4;
        }
      }
    }
    .handle-info {
      width: 750rpx - $player-height - 50rpx;
      height: 100%;
      display: flex;
      flex-flow: column nowrap;
      justify-content: center;
      align-items: flex-start;
      font-size: 28rpx;
      color: #4A4A4A;
      font-weight: 300;
      .player-bar {
        display: flex;
        justify-content: center;
        align-items: center;
        width: 100%;
      }
      .time {
        width: 100%;
        display: flex;
        justify-content: space-between;
        align-items: center;
        .audio-time {
          width: 70rpx;
          font-size: 20rpx;
          font-weight: 100;
          &:last-child {
            text-align: right;
          }
        }
      }
    }
  }

  .player-container-normal {
    .list-container {
      width: 750rpx;
      height: auto;
      background: rgba(0,0,0,0.6);
      z-index: 999;
      overflow: hidden;
      position: relative;
      .list-card {
        animation: card 0.2s ease-out;
        position: absolute;
        left: 0;
        bottom: 0;
      }
      .list-top {
        width: 750rpx;
        height: 70rpx;
        background: white;
        display: flex;
        justify-content: flex-end;
        align-items: center;
        .list-close {
          width: 25rpx;
          height: 25rpx;
          margin-right: 20rpx;
        }
      }
      .list-middle {
        width: 750rpx;
        height: 280rpx;
        background: white;
        .list-item {
          display: flex;
          justify-content: flex-start;
          align-items: center;
          padding-left: 50rpx;
          height: 70rpx;
          .item-title {
            font-size: $size;
            font-weight: 300;
          }
          .item-active {
            color: #D09F65;
            margin-left: 10rpx;
          }
        }
      }
      .list-bottom {
        width: 750rpx;
        height: 100rpx;
        background: white;
        display: flex;
        justify-content: center;
        align-items: center;
        font-size: $size;
        font-weight: 300;
        border-top: 1px #D8D8D8 solid;
        .list-reading {
          width: 100rpx;
          margin-right: 20rpx;
        }
      }
    }
    .play-info-content {
      width: 750rpx;
      height: 100rpx;
      background: #e8f7fe;
      display: flex;
      justify-content: center;
      align-items: center;
      .play-info {
        width: $player-height-normal * 1.5;
        display: flex;
        justify-content: center;
        align-items: center;
        position: relative;
        .poster {
          width: $player-height-normal * 0.7;
          height: $player-height-normal * 0.7;
          border-radius: 50%;
        }
        .animate-stop {
          animation: none;
        }
        .animate-active {
          animation: rotate 3s linear infinite;
        }
        .button-container {
          width: $player-height-normal * 0.7;
          height: $player-height-normal * 0.7;
          position: absolute;
          top: 0;
          left: 0;
          right: 0;
          bottom: 0;
          margin: auto;
          border-radius: 50%;
          background: rgba(0, 0, 0, .63);
          display: flex;
          justify-content: center;
          align-items: center;
          .play-icon {
            display: block;
            width: $player-height-normal * 0.5;
            height: $player-height-normal * 0.5;
          }
        }
      }
      .nomal-content {
        width: 750rpx - $player-height-normal;
        height: 100%;
        display: flex;
        justify-content: space-between;
        align-items: center;
        font-size: 30rpx;
        color: #4A4A4A;
        .content-text {
          width: 750rpx - 0.9 * $player-height-normal - $player-height-normal * 1.5;
        }
        .list-wrapper {
          width: $player-height-normal * 1.5;
          height: $player-height-normal;
          display: flex;
          justify-content: center;
          align-items: center;
          .list-icon {
            width: $player-height-normal * 0.3;
            height: $player-height-normal * 0.3;
          } 
        }
      }
    }
  }
  @keyframes card {
    0% {
      transform: translate3d(0, 100%, 0);
    }
    100% {
      transform: translate3d(0, 0, 0);
    }
  }
  @keyframes rotate {
    0% {
      transform: rotate(0);
    }
    100% {
      transform: rotate(360deg);
    }
  }
</style>